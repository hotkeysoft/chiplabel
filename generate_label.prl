#!/usr/bin/perl
use strict;
use warnings;

use GD;
use Getopt::Long qw/:config auto_help gnu_getopt bundling/;
use Pod::Usage;
use List::Util qw/max min/;

use GdUtil qw/:all/;
use PTouch qw/pixels/;

my $outfile = "label.png";
my $qrfile = undef;
my $text = '';
my $qrtext = "";
$text = "\n John Meacham\n  626-379-6981\n  john\@foo.net";
$qrtext = "MECARD:N:Meacham,John;TEL:626-379-6981;EMAIL:john\@foo.net;;";

my $name = "John Meacham";
my $number = "626-379-6981";
my $email = "john\@foo.net";

#$text = "\nCaroline Corrigan\n323-806-3097\ncaroline.corrigan\@gmail.com";
#$qrtext = "MECARD:N:Corrigan,Caroline;TEL:323-806-3097;EMAIL:caroline.corrigan\@gmail.com;;";

# tape width in mm
my $tapewidth = 12;
my $datamatrix = 0;
my $minquality = 'L';
my $margin = 2;
my $scale = undef;
my $force = 0;

GetOptions(
    "w=n" => \$tapewidth,  # width of tape
    "o=s" => \$outfile,
    "s=n" => \$scale,
    "m"   => \$datamatrix,
    "c=s" => \$qrtext,
    "q=s" => \$minquality,
    "t=s" => \$text,
    "M=n" => \$margin,
    "qrfile=s" => \$qrfile,
    "force" => \$force,
    ) or die "invalid options";

my $codeside = pixels($tapewidth) || pixels(12);
my $code = $datamatrix ? createcode_dm($qrtext) : createcode_qr($qrtext, quality => $minquality);
$code->useFontConfig(1);
printf "QRBounds(%i,%i)\n", $code->getBounds;
my ($cbw,$cbh) = $code->getBounds();
$code = crop_centered($code,$cbw + 2*max(4,$margin) - 8, $cbh + 2*$margin - 8);
printf "modified QRBounds(%i,%i)\n", $code->getBounds();
writepng($code, $qrfile) if $qrfile;

my ($cw,$ch) = $code->getBounds();
if (!defined $scale) {
    my $factor = $codeside / $ch;
    $scale = $factor < 3.5 ? int($factor) : $factor;
    printf "Scale factor: %.4f -> %.4f\n",$factor, $scale;
    die "computed scale is too small to create readable code." if $scale < 2 && !$force;
}

#my $tgd = drawtext($text);
my $tgd = vcat(drawtext($name), drawtext($number, font => 'Times:Italic', size => 16), drawtext($email, size => 16));
print "$tgd\n";
my ($tw,$th) = $tgd->getBounds();

my $cs = $scale * $ch;
my $extra = max(0,$scale * (4 - $margin));
my $img = hcat(hspace($scale*4), $tgd, stretch($code,$scale));
writepng(crop_centered($img,undef, $codeside), $outfile);

__END__

=head1 Generate label png for label printer

=head1 SYNOPSIS

 sample [options] [file ...]

 Options:
   -help            brief help message
   -man             full documentation

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.


=cut

