#!/usr/bin/perl
use strict;
use warnings;

use GD;
use GD::Barcode::QRcode;
use GD::Barcode::DataMatrix;
use Getopt::Long;


my $font = "Ariel";
my $fsize = 18;
my $outfile = "label.png";
my $text = '';
my $qrtext = "";
#$text = "\n John Meacham\n  626-379-6981\n  john\@foo.net";
#$qrtext = "MECARD:N:Meacham,John;TEL:626-379-6981;EMAIL:john\@foo.net;;";

$text = "\nCaroline Corrigan\n323-806-3097\ncaroline.corrigan\@gmail.com";
$qrtext = "MECARD:N:Corrigan,Caroline;TEL:323-806-3097;EMAIL:caroline.corrigan\@gmail.com;;";

# tape width in mm
my $tapewidth = 12;
my $datamatrix = 0;
my $minquality = 'L';
my $chopmargin = 0;
my $scale = undef;

GetOptions(
    "w=n" => \$tapewidth,
    "o=s" => \$outfile,
    "s=n" => \$scale,
    "m"   => \$datamatrix,
    "c=s" => \$qrtext,
    "q=s" => \$minquality,
    "t=s" => \$text,
    "M=n" => \$chopmargin
    ) or die "invalid options";


# This maps the tape width from mm to pixels
# Note that we use a 2 pixel (one in each side) margin,
# the Brother driver uses a much wider margin.
my %WIDTH =
    (
     6=>42-2,
     9=>64-2,
     12=>84-2,
     18=>128-2,
     24=>128,
     );

my $codeside = $WIDTH{$tapewidth};

my $code = $datamatrix ? createcode_dm($qrtext) : createcode_qr($qrtext);
$code->useFontConfig(1);
my ($cw,$ch) = $code->getBounds();

printf "QRBounds(%i,%i)\n", $code->getBounds;

my $tgd = drawtext($text);
my ($tw,$th) = $tgd->getBounds();

my $img = GD::Image->new($codeside + $tw, $codeside);
my $bg = $img->colorAllocate(255,255,255);
my $fg = $img->colorAllocate(0,0,0);

$img->copy($tgd,0,0,0,0, ($tgd->getBounds()));
my $cs = defined $scale ? $scale * $cw : $codeside;
$img->copyResized($code,$tw,0,$chopmargin,$chopmargin, $cs, $cs, map { $_ - $chopmargin * 2 } ($code->getBounds()));

open my $fh, ">", $outfile or die "$!: $outfile";
binmode $fh;
print $fh $img->png;
close $fh;

sub drawtext {
    my ($text) = @_;
    my @tb = GD::Image->stringFT(0, $font, $fsize, 0, 0, 0, $text);
    my ($tw,$th) = ($tb[2] - $tb[6], $tb[3] - $tb[7]);
    print "Text($tw,$th) ", join " ", @tb ," \n";
    my $img = GD::Image->new($tw,$th);
    my $bg = $img->colorAllocate(255,255,255);
    my $fg = $img->colorAllocate(0,0,0);
    $img->stringFT(-$fg, $font, $fsize, 0, -$tb[6], -$tb[7], $text);
    return $img;
}

sub createcode_qr {
    my ($text) = @_;
    foreach my $v (1 .. 40) {
        my $code = eval { GD::Barcode::QRcode->new($text, { Ecc => $minquality, Version => $v }) };
        if (defined $code) {
            print "QR Version: $v\n";
            foreach my $q ('H', 'Q', 'M', 'L') {
                $code = eval { GD::Barcode::QRcode->new($text, { Ecc => $q, Version => $v }) };
                if (defined $code) {
                    print "QR Quality: $q\n";
                    return $code->plot();
                }
            }
        }
    }
}

sub createcode_dm{
    my ($text) = @_;
    my $code = GD::Barcode::DataMatrix->new($text);
    return $code->plot();
}
