#!/usr/bin/perl
use strict;
use warnings;

use GD;
use GD::Barcode::QRcode;
use Getopt::Long;

my $font = "Ariel";
my $fsize = 18;
my $outfile = "label.png";
my $text = "\n John Meacham\n  626-379-6981\n  john\@foo.net";
my $qrtext = "MECARD:N:Meacham,John;TEL:626-379-6981;EMAIL:john\@foo.net;;";
#my $qrtext = "foo.net/d/foo.pdf";

# tape width in mm
my $tapewidth = 12;

# This maps the tape width from mm to pixels
# Note that we use a 2 pixel (one in each side) margin,
# the Brother driver uses a much wider margin.
my %WIDTH =
    (
     6=>42-2,
     9=>64-2,
     12=>84-2,
     18=>128-2,
     24=>128,
     );

my $codeside = $WIDTH{$tapewidth};

my $code = createcode($qrtext);
$code->useFontConfig(1);

printf "QRBounds(%i,%i)\n", $code->getBounds;

my $tgd = drawtext($text);
my ($tw,$th) = $tgd->getBounds();

my $img = GD::Image->new($codeside + $tw, $codeside);
my $bg = $img->colorAllocate(255,255,255);
my $fg = $img->colorAllocate(0,0,0);

$img->copy($tgd,0,0,0,0, ($tgd->getBounds()));
$img->copyResized($code,$tw,0,0,0, $codeside, $codeside, ($code->getBounds()));

open my $fh, ">", $outfile;
binmode $fh;
print $fh $img->png;
close $fh;

sub drawtext {
    my ($text) = @_;
    my @tb = GD::Image->stringFT(0, $font, $fsize, 0, 0, 0, $text);
    my ($tw,$th) = ($tb[2] - $tb[6], $tb[3] - $tb[7]);
    print "Text($tw,$th) ", join " ", @tb ," \n";
    my $img = GD::Image->new($tw,$th);
    my $bg = $img->colorAllocate(255,255,255);
    my $fg = $img->colorAllocate(0,0,0);
    $img->stringFT(-$fg, $font, $fsize, 0, -$tb[6], -$tb[7], $text);
    return $img;
}

sub createcode {
    my ($text) = @_;
    foreach my $v (1 .. 40) {
        my $code = eval { GD::Barcode::QRcode->new($text, { Ecc => 'L', Version => $v }) };
        if (defined $code) {
            print "QR Version: $v\n";
            foreach my $q ('H', 'Q', 'M', 'L') {
                $code = eval { GD::Barcode::QRcode->new($text, { Ecc => $q, Version => $v }) };
                if (defined $code) {
                    print "QR Quality: $q\n";
                    return $code->plot();
                }
            }
        }
    }
}
